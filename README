# Python wrapper for Probabilistic Occupancy Map (POM)

F. Fleuret, J. Berclaz, R. Lengagne and P. Fua, Multi-Camera People Tracking with a Probabilistic Occupancy Map, IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. 30, Nr. 2, pp. 267 - 282, February 2008.

https://cvlab.epfl.ch/software/pom/index.php

## Prerequisites

- numpy
- scipy
- imageio
- pyyaml
- setuptools
- matplotlib
- python 3.5+
- CMake
- OpenCV 3.2.0+
- PyTorch 0.2+ (GPU support not necessary)
- Boost.Python 1.66+

## Installation
```
apt-get update
apt-get install  python3-pip python3-setuptools
pip3 install --upgrade pip
pip3 install pipenv
pip3 install --upgrade setuptools
```

To compile the C++ core (This step requires Boost.Python) 
```
python3 setup.py build_ext
```
To install the library
```
python3 setup.py install
```

### Installing PyTorch
PyTorch does not fully support pip yet therefore the library has to be installed manually.
In order to install the latest PyTorch packages go to `www.pytorch.org` and select the installation options that best suits your needs. An example would be the following: packagemanager=pip python=3.5 cuda=None

```
pip3 install http://download.pytorch.org/whl/cpu/torch-0.3.0.post4-cp35-cp35m-linux_x86_64.whl 
pip3 install torchvision
```
### Installing Boost.Python
We strongly suggest installing Boost.Python from source as follow:
```
cd $HOME
wget https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.tar.bz2
tar --bzip2 -xf boost_1_66_0.tar.bz2
cd boost_1_66_0
./bootstrap.sh --with-python=python3
sudo ./b2 install
sudo ldconfig
```

###### Possible issues:
1. If you have a message similar to this one: `failed updating 66 targets...fatal error: pyconfig.h: No such file or directory` then you need to modify line 542 of file tools/build/src/tools/python.jam from this:
		includes ?= $(prefix)/include/python$(version) ;
to this:
		includes ?= $(prefix)/include/python$(version)m ;
now try again installing boost.python:
```
./bootstrap.sh --with-python=python3
sudo ./b2 install
sudo ldconfig
```

1. Another version of Boost is clashing with the new one. If it is the case for you we suggest removing the old version and re-install the new one. HINT: after compiling the core module, type `ldd core.so` to see which boost.python was used.

### Installing CMake with SSL support
The installation of CMake with SSL support is required for the installation of OpenCV with the special Intel IPP functions.
```
sudo apt-get install libcurl4-gnutls-dev
mdkir -p ~/tmp/cmake
cd !$
wget https://cmake.org/files/v3.10/cmake-3.10.2.tar.gz
tar -xzf cmake-3.10.2.tar.gz
cd cmake-3.10.2/
./bootstrap --parallel=8 --system-curl
make -j 8
```
then we remove the old CMake with:
```
sudo apt remove cmake
```
and finally we install the new CMake with:
```
sudo make install
```

### Installing OpenCV + Contrib + FFmpeg
We first install some basic packages:
```
sudo apt-get install build-essential
sudo apt-get install git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev
sudo apt-get install libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev
```
then:
```
cd ${HOME}
git clone https://github.com/opencv/opencv.git
git clone https://github.com/opencv/opencv_contrib.git 
cd opencv
mkdir build
cd build

cmake -DWITH_FFMPEG=ON -DOPENCV_EXTRA_MODULES_PATH=${HOME}/opencv_contrib/modules -DWITH_CUDA=OFF -DBUILD_TIFF=ON -DBUILD_opencv_java=OFF -DENABLE_AVX=ON -DWITH_OPENGL=ON -DWITH_OPENCL=ON -DWITH_IPP=ON -DWITH_TBB=ON -DWITH_EIGEN=ON -DWITH_V4L=ON -DWITH_VTK=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_opencv_python2=OFF -DCMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") -DPYTHON3_EXECUTABLE=$(which python3) -DPYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") -DPYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_PYTHON_EXAMPLES=ON -D INSTALL_C_EXAMPLES=OFF -D PYTHON_EXECUTABLE=${HOME}/anaconda3/bin/python -D BUILD_EXAMPLES=ON ..
```
then we suggest double-checking the report to make sure FFmpeg will be available:
>-- General configuration for OpenCV 3.4.0-dev >=====================================
>--   Extra modules:
>--     Location (extra):   /home/.../opencv_contrib/modules
>--     Version control (extra):     3.4.0

>--   Video I/O:
>--     DC1394:                      NO
>--     FFMPEG:                      YES
>--       avcodec:                   YES (ver 56.60.100)
>--       avformat:                  YES (ver 56.40.101)
>--       avutil:                    YES (ver 54.31.100)
>--       swscale:                   YES (ver 3.1.101)
>--       avresample:                YES (ver 2.1.0)

then:
```
make -j8
sudo make install
```
to verify OpenCV is correctly installed; open a terminal and type `python` then type:
```
 import cv2
 print(cv2.__version__)
```

## License

GPL v3

## Understanding the algorithm

F. Fleuret, J. Berclaz, R. Lengagne and P. Fua, Multi-Camera People Tracking with a Probabilistic Occupancy Map, IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. 30, Nr. 2, pp. 267 - 282, February 2008.

## Notes for developpers

### Managing dependencies with Pipenv
In order to manage the project dpendencies go to the repository root and create a virtual environment:
```
pipenv --three
```
Then install the exeisting dependencies from the Pipfile:
```
pipenv update
```
In the case PyTorch still causes problems you need to install it manually i.e.:
```
pipenv install http://download.pytorch.org/whl/cpu/torch-0.3.0.post4-cp35-cp35m-linux_x86_64.whl 
pipenv install torchvision
```
To install a new package:
```
pipenv install package-name
```
In order to run a script inside the virtual environment:
```
pipenv run python3 main_apptracking.py
```

